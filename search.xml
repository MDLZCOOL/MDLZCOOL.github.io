<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Windows下Clash for Windows使用教程</title>
    <url>/post/5d67cfa0.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码有误，请重试" data-whm="解密的内容无法被验证，但仍可阅读">
  <script id="hbeData" type="hbeData" data-hmacdigest="b047d732cd370f96a5388f435aee88102a7e90e07ce60633ea9b54efb322245a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>KiCad导出Gerber图形文件</title>
    <url>/post/ef2c5f04.html</url>
    <content><![CDATA[<h3 id="KiCad导出Gerber图形文件"><a href="#KiCad导出Gerber图形文件" class="headerlink" title="KiCad导出Gerber图形文件"></a>KiCad导出Gerber图形文件</h3><p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202405271719605.png" alt="image-20240527171958427"></p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202405271720173.png" alt="image-20240527172047054"></p>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>PCB</tag>
      </tags>
  </entry>
  <entry>
    <title>基于ESP-IDF在ESP32S3上移植LVGL和显示触摸驱动</title>
    <url>/post/64bc178b.html</url>
    <content><![CDATA[<p><strong>前言：之前基本一直在搞STM32的开发，想换到别的平台（比如ESP32）试试，也算对自己的一种锻炼和提升，注意到网上关于LVGL移植的教程非常多，但是大部分是基于Arduino平台的，基本没有基于ESP-IDF框架的（即使有也已经过时）。最近入手了几块ESP32的开发板和一块带CTP（电容触摸）的3.5寸IPS屏幕，可视角度和分辨率都不错，作为一个对GUI界面有执着追求的人，我想把当下很火的嵌入式GUI项目<a href="https://lvgl.io/">LVGL - Light and Versatile Embedded Graphics Library</a>移植到我的项目里，并实现一部分优化，让它即使在资源极端有限的情况下也能较为流畅地运行~</strong></p>
<p><strong>进度:</strong></p>
<ul>
<li>（已完成）实现正确显示 - 20240412</li>
<li>（已完成）跑demo、优化帧率 - 20240414</li>
<li>（未完成）基于SquareLine平台设计UI</li>
<li>（未完成）接入各种传感器</li>
</ul>
<h2 id="物料选择"><a href="#物料选择" class="headerlink" title="物料选择"></a>物料选择</h2><ul>
<li><p>ESP32S3开发板一块，比如我使用立创的ESP32-S3开发板（集成串口芯片）</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404122139635.jpg" alt="087b0e76d0dc9852b9dd31fb43531fa"></p>
</li>
<li><p>3.5寸电容触摸屏（显示驱动为ST7796U，电容触摸驱动为gt911）</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404122139803.jpg" alt="6dd6fbcc761ede3cc4c3065eba1070c"></p>
</li>
<li><p>杜邦线若干</p>
</li>
<li><p>Type-C数据线</p>
</li>
</ul>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul>
<li><p>电脑系统：<code>Windows 11</code></p>
</li>
<li><p>开发环境：<code>Visual Studio Code</code>（至于为什么不用CLion，因为CLion上没配起来IDF框架（抽象））、<code>ESP-IDF_5.1.2</code></p>
</li>
</ul>
<p><em>这里具体配置细节暂时略去，因为最近要重新装系统，到时候刚好重新配置一遍，写个教程补上 - 20240412</em></p>
<h2 id="开工！"><a href="#开工！" class="headerlink" title="开工！"></a>开工！</h2><h3 id="文件准备"><a href="#文件准备" class="headerlink" title="文件准备"></a>文件准备</h3><ul>
<li><p>先找到示例文件夹，在IDF的安装目录下<br><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121501913.png" alt="image-20240412150107877"></p>
</li>
<li><p>打开进入<code>./get-started/</code>，找到<code>hello_world</code>程序并复制出来</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121502899.png" alt="image-20240412150249861"></p>
</li>
<li><p>再在<code>./peripherals/i2c</code>中找到<code>i2c_tools</code>，也和刚才的<code>hello_world</code>放在一起<br><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121506011.png" alt="image-20240412150606976"></p>
</li>
<li><p>打开<code>Visual Studio Code</code>，选到hello_world目录</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121518948.png" alt="image-20240412151819885"></p>
</li>
<li><p>这里配置一下开发板的信息：<br>1. 插上开发板，点一下左下角的<code>COM1</code>，根据实际选择正确的<code>COM</code><br>1. 点左下角<code>esp32</code>，选择合适的esp芯片型号，比如我就选esp32s3<br>1. 选择<code>OpenOCD</code>的配置文件，一般选择<code>via ESP-PROG</code>就好<br>1. 点左下角的五角星，选择<code>UART</code>（我的开发板上带了TTL芯片）<br>最终配置好应该是这样的：<br><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121527778.png" alt="image-20240412152745759"></p>
</li>
<li><p>在main文件夹里新建一个<code>idf_component.yml</code>文件，并复制以下内容</p>
<p><em><a href="https://docs.espressif.com/projects/idf-component-manager/en/latest/reference/manifest_file.html">这个网站</a>有<code>idf_component.yml</code>的编写规则，这里我就直接用里面的框架了</em></p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">pkg_name:</span> <span class="string">&quot;pkg_version&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>浏览器打开<a href="https://www.espressif.com/">乐鑫官网</a>，在<code>SDKs</code>下找到<code>IDF Component Manager</code>包管理器</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121535817.png" alt="image-20240412153510715"></p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121546289.png" alt="image-20240412154657218"></p>
</li>
<li><p>在<code>IDF Component Manager</code>中搜索<code>LVGL</code>，这次用的是<code>lvgl</code>和<code>esp_lvgl_port</code>，至于驱动为什么不用<code>lvgl_esp32_drivers</code>，是因为这玩意的代码已经很久没有维护了，不支持<code>IDF5.x</code>版本和较新的<code>LVGL</code></p>
<p>这次用的是<code>1.4.0</code>版本的<code>esp_lvgl_port</code>，在<code>idf_component.yml</code>中把<code>pkg_name</code>换成<code>esp_lvgl_port</code>，因为我们这次移植的是<code>8.4.0</code>的<code>LVGL</code>，所以<code>pkg_version</code>改成<code>1.4.0</code>，把<code>LVGL</code>和<code>gt911触摸芯片</code>和<code>ST7796显示芯片</code>的驱动也加上，像下面这样</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">esp_lvgl_port:</span> <span class="string">&quot;1.4.0&quot;</span></span><br><span class="line">  <span class="attr">esp_lcd_touch_gt911:</span> <span class="string">&quot;1.1.0&quot;</span></span><br><span class="line">  <span class="attr">esp_lcd_st7796:</span> <span class="string">&quot;1.2.1&quot;</span></span><br><span class="line">  <span class="attr">lvgl/lvgl:</span> <span class="string">&quot;8.4.0&quot;</span></span><br></pre></td></tr></table></figure>

<p>  然后编译一次就会自动下载相关依赖（这里即使最后编译报错了也没关系，因为依赖已经下好了，报错稍后再去解决）</p>
<p>  待依赖下载完成之后，工作空间的根目录会出现<code>managed_components</code>文件夹，把这个文件夹改为<code>components</code>（这步是因为可能要修改某些依赖的源码，如果不这样的话修改后会报<code>哈希不匹配</code>的错），把里面的依赖整理一下，像这样<img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121647535.png" alt="image-20240412164748491"></p>
<p>  检查每个依赖中的其他关联依赖（<code>idf_component.yml</code>），把所有除了IDF以外的其他依赖全部删掉</p>
<ul>
<li><p>把<code>./esp_lvgl_port/examples/touchscreen/main/</code>下的<code>main.c</code>文件的全部内容复制到hello_world_main.c里<img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121657456.png"></p>
</li>
<li><p>顺便说一下，如果VScode没法代码补全和代码跳转的话，按下<code>Ctrl+Shift+P</code>，搜索<code>IntelliSense</code>，选择第一个不带bootloader的，选好之后Full Clean，再点一下编译，就可以正常使用了</p>
</li>
<li><p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121808911.png" alt="image-20240412180848835"></p>
</li>
<li><p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121809959.png" alt="image-20240412180922880"></p>
</li>
<li><p>编译一下，看看报错</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121659815.png" alt="image-20240412165942792"></p>
<p>可以看到找不到对应的头文件，这里示例文件默认用的触摸驱动是tt21100，与我用的gt911不一样，所以我们要包含gt911的驱动进去，故要做的就是修改头文件，把tt21100的驱动换成gt911的，并且把程序里调用的函数进行对应的更改</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;esp_lcd_touch_tt21100.h&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>更改为</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;esp_lcd_touch_gt911.h&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>对应的函数改为gt911</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121815198.png" alt="image-20240412181507168"></p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121816895.png" alt="image-20240412181658868"></p>
<p>再次编译，看看报错</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121820971.png" alt="image-20240412182013943"></p>
<p>注意到这里找不到<code>lvgl.h</code>的错误是<code>esp_lvgl_port</code>这个依赖发出的，所以进入该依赖的<code>CmakeLists.txt</code>，在<code>PRIV_REQUIRES</code>里加入<code>lvgl</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121821249.png" alt="image-20240412182143182"></p>
<p>再次编译，看看报错</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121822908.png" alt="image-20240412182235878"></p>
<p>这里gt911的驱动报错找不到<code>driver/gpio.h</code>，与上面类似地，修改gt911的驱动里的<code>CmakeLists.txt</code>，在<code>PRIV_REQUIRES</code>里加入<code>driver</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121824523.png" alt="image-20240412182412458"></p>
<p>再编译，看看报错</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121825244.png" alt="image-20240412182513212"></p>
<p>这里gt911的驱动报错找不到<code>esp_lcd_touch.h</code>，与上面类似地，修改gt911的驱动里的<code>CmakeLists.txt</code>，在<code>PRIV_REQUIRES</code>里加入<code>esp_lcd_touch</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121826592.png"></p>
<p>再次编译，发现可以编译通过了！（好吧，其实离能用还有很远）</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121827054.png" alt="image-20240412182738026"></p>
<h3 id="硬件连线"><a href="#硬件连线" class="headerlink" title="硬件连线"></a>硬件连线</h3><p>查看开发板的原理图和乐鑫ESP32S3技术文档，应该按照下表接线</p>
<table>
<thead>
<tr>
<th align="center">屏幕+触摸</th>
<th align="center">ESP32S3开发板</th>
</tr>
</thead>
<tbody><tr>
<td align="center">VDD</td>
<td align="center">3V3</td>
</tr>
<tr>
<td align="center">GND</td>
<td align="center">GND</td>
</tr>
<tr>
<td align="center">SCLK</td>
<td align="center">GPIO_NUM_12</td>
</tr>
<tr>
<td align="center">MOSI</td>
<td align="center">GPIO_NUM_11</td>
</tr>
<tr>
<td align="center">RST</td>
<td align="center">GPIO_NUM_3</td>
</tr>
<tr>
<td align="center">DC</td>
<td align="center">GPIO_NUM_9</td>
</tr>
<tr>
<td align="center">CS</td>
<td align="center">GPIO_NUM_10</td>
</tr>
<tr>
<td align="center">BL</td>
<td align="center">GPIO_NUM_46</td>
</tr>
<tr>
<td align="center">I2C_SCL</td>
<td align="center">GPIO_NUM_2</td>
</tr>
<tr>
<td align="center">I2C_SDA</td>
<td align="center">GPIO_NUM_1</td>
</tr>
<tr>
<td align="center">CTP_INT</td>
<td align="center">GPIO_NUM_45</td>
</tr>
</tbody></table>
</li>
</ul>
<p><strong>注意：VDD和GND千万不能接错，否则烧毁！</strong></p>
<p>接好线后烧录刚才的程序试一下，然后…咦？屏幕怎么没反应呢？？？</p>
<p>原来是接线没有在程序里映射出来，这里修改<code>hello_world_main.c</code>的第24-50行为，在不同硬件上需要做相应调整</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* LCD settings */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_SPI_NUM         (SPI3_HOST)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_PIXEL_CLK_HZ    (40 * 1000 * 1000)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_CMD_BITS        (8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_PARAM_BITS      (8)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_COLOR_SPACE     (ESP_LCD_COLOR_SPACE_BGR)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_BITS_PER_PIXEL  (16)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_DRAW_BUFF_DOUBLE (1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_DRAW_BUFF_HEIGHT (50)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_BL_ON_LEVEL     (1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* LCD pins */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_GPIO_SCLK       (GPIO_NUM_12)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_GPIO_MOSI       (GPIO_NUM_11)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_GPIO_RST        (GPIO_NUM_3)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_GPIO_DC         (GPIO_NUM_9)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_GPIO_CS         (GPIO_NUM_10)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_LCD_GPIO_BL         (GPIO_NUM_46)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Touch settings */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_TOUCH_I2C_NUM       (0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_TOUCH_I2C_CLK_HZ    (400000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* LCD touch pins */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_TOUCH_I2C_SCL       (GPIO_NUM_2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_TOUCH_I2C_SDA       (GPIO_NUM_1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXAMPLE_TOUCH_GPIO_INT      (GPIO_NUM_45)</span></span><br></pre></td></tr></table></figure>

<p>改完之后再次烧录，发现屏幕不断滚动报错</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121851092.png" alt="image-20240412185134048"></p>
<p>看红字知道报错是因为I2C总线上没有找到gt911，这就比较奇怪了，难道是因为I2C地址错了吗？幸好乐鑫提供了一个专门的I2C检测工具，可以遍历所有I2C地址，还记得和hello_world工程一起复制过来的i2c_tools工程吗，现在需要用到它了</p>
<p>在VScode中打开<code>i2c_tools</code>工程，编译烧录，在终端中可以看到进入了<code>i2c_tools</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121938181.png" alt="image-20240412193813115"></p>
<p>输入<code>i2cdetect</code>即可遍历总线上的地址</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121938576.png" alt="image-20240412193850546"></p>
<p>这里出现了<code>0x14</code>，当前挂载在I2C总线上的只有一个设备，所以gt911的地址是<code>0x14</code>，然后我们回到hello_world程序，打开<code>/components/esp_lcd_touch_gt911/include/esp_lcd_touch_gt911.h</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121942008.png" alt="image-20240412194202971"></p>
<p>可以看到定义了两个I2C地址，在结构体中调用了一个，这里看到调用的是<code>ESP_LCD_TOUCH_IO_I2C_gt911_ADDRESS</code>，值为<code>0x5D</code>，与实际地址<code>0x14</code>不符合，而<code>ESP_LCD_TOUCH_IO_I2C_gt911_ADDRESS_BACKUP</code>的值为<code>0x14</code>，所以结构体里改为<code>ESP_LCD_TOUCH_IO_I2C_gt911_ADDRESS_BACKUP</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121944838.png" alt="image-20240412194432812"></p>
<h3 id="改代码"><a href="#改代码" class="headerlink" title="改代码"></a>改代码</h3><p>再次烧录，看看效果__结果还是不行，还是报I2C的错误，这里我们查看原理图，发现屏幕的I2C没有上拉__，所以我们需要打开芯片的内部上拉</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404121954480.png" alt="image-20240412195427450"></p>
<p>然后再次烧录，屏幕成功点亮，但是显示有点奇怪</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404122139981.jpg" alt="0f0e9dbd753c2ea81331be530d4058f"></p>
<p>现在发现：</p>
<ol>
<li>长宽不对</li>
<li>字显示不清晰</li>
<li>屏幕镜像颠倒 </li>
<li>触摸X、Y轴反向</li>
</ol>
<p>现在开始逐一解决：</p>
<ol>
<li>设置长宽，更改宏定义里的<code>EXAMPLE_LCD_H_RES</code>为320，<code>EXAMPLE_LCD_V_RES</code>为480</li>
<li>点左下角小齿轮，进入<code>SDK Configuration editor</code>，搜索<code>Swap</code>，找到这个选项，打上勾（改完记得保存）<br> <img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404122005348.png" alt="image-20240412200541312"></li>
<li>这两个<code>true</code>随便改一个为<code>false</code><br> <img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404122021990.png" alt="image-20240412202126956"></li>
<li>把结构体里的<code>mirror_x</code>的1改为0，<code>mirror_y</code>的0改为1<br> <img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404122047197.png" alt="image-20240412204715167"></li>
</ol>
<p>然后再次烧录测试，发现颜色还是不对，背景是黑色的，但是理论上应该是白色<img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404122138345.jpg" alt="c4ae5d37df49d5748cd673873cdaece"></p>
<p>考虑到屏幕的面板是IPS的，而默认显示驱动可能支持的是TN屏，我这里选择魔改另外一款默认为IPS的显示驱动芯片（ili9341）的驱动程序，具体操作如下：</p>
<ol>
<li><p>通过<code>idf-component</code>下载<code>esp_lcd_ili9341</code>并移动到<code>components</code>目录下，并修改<code>esp_lcd_ili9341</code>的<code>idf-component.yml</code></p>
</li>
<li><p>修改<code>/esp_lcd_ili9341/esp_lcd_ili9341.c</code>的<code>vendor_specific_init_default</code>数组为（这里是参照屏幕厂商的驱动改的）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="type">const</span> <span class="type">ili9341_lcd_init_cmd_t</span> vendor_specific_init_default[] = &#123;</span><br><span class="line"><span class="comment">//  &#123;cmd, &#123; data &#125;, data_size, delay_ms&#125;</span></span><br><span class="line">    <span class="comment">/* Power contorl B, power control = 0, DC_ENA = 1 */</span></span><br><span class="line">    <span class="comment">// &#123;0x11, (uint8_t [])&#123;0x00&#125;, 0, 120&#125;,</span></span><br><span class="line">    &#123;<span class="number">0xB2</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0x0C</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x33</span>, <span class="number">0x33</span>&#125;, <span class="number">5</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xB0</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0x00</span>, <span class="number">0xE0</span>&#125;, <span class="number">2</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    <span class="comment">// &#123;0x36, (uint8_t [])&#123;0x00&#125;, 1, 0&#125;,</span></span><br><span class="line">    <span class="comment">// &#123;0x3A, (uint8_t [])&#123;0x05&#125;, 1, 0&#125;,</span></span><br><span class="line">    &#123;<span class="number">0xB7</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0x56</span>&#125;, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xBB</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0x14</span>&#125;, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xC0</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0x2C</span>&#125;, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xC2</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0x01</span>&#125;, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xC3</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0x0B</span>&#125;, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xC4</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0x10</span>&#125;, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xC6</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0x0F</span>&#125;, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xD0</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0xA4</span>, <span class="number">0xA1</span>&#125;, <span class="number">2</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xD6</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0xA1</span>&#125;, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xE0</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0xD0</span>, <span class="number">0x08</span>, <span class="number">0x0A</span>, <span class="number">0x0D</span>, <span class="number">0x0B</span>, <span class="number">0x07</span>, <span class="number">0x21</span>, <span class="number">0x33</span>, <span class="number">0x39</span>, <span class="number">0x39</span>, <span class="number">0x16</span>, <span class="number">0x16</span>, <span class="number">0x1F</span>, <span class="number">0x3C</span>&#125;, <span class="number">14</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0xE1</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0xD0</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x21</span>, <span class="number">0x32</span>, <span class="number">0x38</span>, <span class="number">0x16</span>, <span class="number">0x14</span>, <span class="number">0x14</span>, <span class="number">0x20</span>, <span class="number">0x3D</span>&#125;, <span class="number">14</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x21</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0x00</span>&#125;, <span class="number">0</span>, <span class="number">120</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x29</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0x00</span>&#125;, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0x2C</span>, (<span class="type">uint8_t</span> [])&#123;<span class="number">0x00</span>&#125;, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>至此驱动修改完毕，在<code>hello_world_main.c</code>中include一下<code>esp_lcd_ili9341.h</code>，把<code>esp_lcd_new_panel_st7796</code>函数改为<code>esp_lcd_new_panel_ili9341</code>，烧录看看效果</p>
</li>
</ol>
<h3 id="正常显示-20240412"><a href="#正常显示-20240412" class="headerlink" title="正常显示 - 20240412"></a>正常显示 - 20240412</h3><p>可以看到，已经正确显示了（但其实旋转方向之后显示还是不太对，屏幕会镜像，不知道为什么，应该还是驱动的问题）<img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404122138205.jpg" alt="61e5f02c1fdb5e1fd49e2a5a34a134b"></p>
<h3 id="跑demo-20240414"><a href="#跑demo-20240414" class="headerlink" title="跑demo - 20240414"></a>跑demo - 20240414</h3><h4 id="Music音乐播放器demo"><a href="#Music音乐播放器demo" class="headerlink" title="Music音乐播放器demo"></a>Music音乐播放器demo</h4><p>点左下角小齿轮，进入<code>SDK Configuration editor</code>，找到LVGL相关的设置</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404141416848.png" alt="image-20240414141602770"></p>
<p>在<code>Demos</code>里面勾选<code>Music player demo</code>，别忘了保存</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404141417085.png" alt="image-20240414141718058"></p>
<p>然后回到hello_world_main.c里，找到函数<code>app_main_display()</code>，将里面的<code>Label</code>和<code>Button</code>注释掉，并在后面加上lv_demo_music函数的声明和调用</p>
<p><em>这里补充一点，C语言可以在函数里面声明函数，格式与在函数之外相同。 声明后的函数只在本函数内调用有效。其他函数需要重新声明</em></p>
<p>修改好后的app_main_display()函数如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">app_main_display</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">lv_obj_t</span> *scr = lv_scr_act();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Task lock */</span></span><br><span class="line">    lvgl_port_lock(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Your LVGL objects code here .... */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// /* Label */</span></span><br><span class="line">    <span class="comment">// lv_obj_t *label = lv_label_create(scr);</span></span><br><span class="line">    <span class="comment">// lv_label_set_recolor(label, true);</span></span><br><span class="line">    <span class="comment">// lv_obj_set_width(label, EXAMPLE_LCD_H_RES);</span></span><br><span class="line">    <span class="comment">// lv_obj_set_style_text_align(label, LV_TEXT_ALIGN_CENTER, 0);</span></span><br><span class="line">    <span class="comment">// lv_label_set_text(label, &quot;#FF0000 &quot;LV_SYMBOL_BELL&quot; Hello world Espressif and LVGL &quot;LV_SYMBOL_BELL&quot;#\n#FF9400 &quot;LV_SYMBOL_WARNING&quot; For simplier initialization, use BSP &quot;LV_SYMBOL_WARNING&quot; #&quot;);</span></span><br><span class="line">    <span class="comment">// lv_obj_align(label, LV_ALIGN_CENTER, 0, -30);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// /* Button */</span></span><br><span class="line">    <span class="comment">// lv_obj_t *btn = lv_btn_create(scr);</span></span><br><span class="line">    <span class="comment">// label = lv_label_create(btn);</span></span><br><span class="line">    <span class="comment">// lv_label_set_text_static(label, &quot;Rotate screen&quot;);</span></span><br><span class="line">    <span class="comment">// lv_obj_align(btn, LV_ALIGN_BOTTOM_MID, 0, -30);</span></span><br><span class="line">    <span class="comment">// lv_obj_add_event_cb(btn, _app_button_cb, LV_EVENT_CLICKED, NULL);</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">lv_demo_music</span><span class="params">(<span class="type">void</span>)</span>; </span><br><span class="line">    lv_demo_music();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Task unlock */</span></span><br><span class="line">    lvgl_port_unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们编译试试，看会不会报错<img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404141423001.png" alt="image-20240414142329954"></p>
<p>还真报错了，这里说的是找不到需要的字体，点左下角小齿轮进入LVGL的配置界面，在Font usage里勾选上12和16号字体，记得保存</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404141424111.png" alt="image-20240414142453070"></p>
<p>再编译试试，可以看到已经编译过了<img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404141429970.png" alt="image-20240414142923937"></p>
<p>那就烧录看看效果吧（这里有可能触摸的X或者Y还会反，再去改tp_cfg结构体里的mirror_x或者mirror_y就行）<img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404141435341.jpg" alt="0396dc12365b70b64f1728d4a349420"></p>
<p>可以看到显示和触摸都正常了</p>
<h3 id="跑组件（Widget）demo"><a href="#跑组件（Widget）demo" class="headerlink" title="跑组件（Widget）demo"></a>跑组件（Widget）demo</h3><h3 id="优化帧率-20240414"><a href="#优化帧率-20240414" class="headerlink" title="优化帧率 - 20240414"></a>优化帧率 - 20240414</h3><p>打开<a href="https://www.espressif.com/">乐鑫官网</a>，点顶部的Support，在找到ESP-FAQ，搜索LVGL，即可找到如下内容</p>
<ul>
<li><p>Taking ESP32-S3R8 as an example, the following ESP configuration items can improve the frame rate (ESP-IDF release&#x2F;v5.1):</p>
<ul>
<li><code>CONFIG_FREERTOS_HZ=1000</code></li>
<li><code>CONFIG_ESP_DEFAULT_CPU_FREQ_MHZ_240=y</code></li>
<li><code>CONFIG_ESPTOOLPY_FLASHMODE_QIO=y</code></li>
<li><code>CONFIG_ESPTOOLPY_FLASHFREQ_120M=y</code> [should be consistent with PSRAM]</li>
<li><code>CONFIG_SPIRAM_MODE_OCT=y</code></li>
<li><code>CONFIG_IDF_EXPERIMENTAL_FEATURES=y</code> and <code>CONFIG_SPIRAM_SPEED_120M=y</code> [should be consistent with FLASH]</li>
<li><code>CONFIG_SPIRAM_FETCH_INSTRUCTIONS=y</code></li>
<li><code>CONFIG_SPIRAM_RODATA=y</code></li>
<li><code>CONFIG_ESP32S3_DATA_CACHE_LINE_64B=y</code></li>
<li><code>CONFIG_COMPILER_OPTIMIZATION_PERF=y</code></li>
</ul>
</li>
<li><p>The following LVGL configuration items can improve the frame rate (LVGL v8.3):</p>
<ul>
<li><p><code>#define LV_MEM_CUSTOM 1</code> or <code>CONFIG_LV_MEM_CUSTOM=y</code></p>
</li>
<li><p><code>#define LV_MEMCPY_MEMSET_STD 1</code> or <code>CONFIG_LV_MEMCPY_MEMSET_STD=y</code></p>
</li>
<li><p><code>#define LV_ATTRIBUTE_FAST_MEM IRAM_ATTR</code> or <code>CONFIG_LV_ATTRIBUTE_FAST_MEM=y</code></p>
</li>
</ul>
</li>
</ul>
<p>再加一个<code>LV_DISP_DEF_REFR_PERIOD</code>由30改为10</p>
<p>注：如果要显示帧率和CPU占用，可以吧<code>Show CPU usage and FPS count</code>勾上</p>
<p>这里就按照官网的推荐来进行修改，点左下角小齿轮，分别修改上面的这些参数（修改完记得保存），其中某些参数可能找不到，这是由于CSDK的版本和使用的MCU型号不同导致的，不用深究</p>
<p>修改hello_world_main.c里的SPI频率到80M（实测这个影响帧率最为明显）</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404141458859.png" alt="image-20240414145809827"></p>
<p>改完以后再来编译烧录，发现帧率提升了很多，滑动较为丝滑了</p>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>ESP32</tag>
        <tag>LVGL</tag>
        <tag>ESP-IDF</tag>
      </tags>
  </entry>
  <entry>
    <title>开箱Sipeed的SLogic Combo 8，多合一开发调试工具</title>
    <url>/post/e3aef73e.html</url>
    <content><![CDATA[<p><strong>写在前面：今天刚拿到一个好玩的小玩意，SLogic Combo 8，这是一个集逻辑分析仪、四组串口、DAP-Link、CK-Link为一体的开发调试工具，刚拿到就迫不及待地试玩了一下，发现确实好玩ლ(´ڡ&#96;ლ)，进一步丰富和简化了我的工具链，希望可以用的长一些</strong></p>
<h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p>打开包装盒，映入眼帘的就是SLogic的主体了，整体设计的简约大气，通过背面的隐藏式按键和指示灯可以知道当前在哪个模式下，同时通过面板可以知道各个模式下引脚的定义，这点设计的还是很人性化的，并且提供了3.3V和5V两种电平可以选择</p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404140028088.jpg" alt="580570c6cf3dfad75f8fe9e0e9619f9"></p>
<p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404140030172.jpg" alt="3ee0e225bdfe8fa4c53dd99e7eabd3f"></p>
<h2 id="试玩"><a href="#试玩" class="headerlink" title="试玩"></a>试玩</h2><p>没什么好说的，标准的串口、DAP调试器，不知道为什么DAP虚拟的串口经常会卡死，逻辑分析仪要用魔改过的上位机</p>
]]></content>
      <categories>
        <category>开箱试玩</category>
      </categories>
      <tags>
        <tag>逻辑分析仪</tag>
      </tags>
  </entry>
  <entry>
    <title>舵机多功能测试程序说明</title>
    <url>/post/cee333e2.html</url>
    <content><![CDATA[<p><strong>写在前面：基地一直都有对舵机快捷测试的需求，但是每次都得改源码，很麻烦，也不能实现舵机的精准角度控制，最近忙完期中考试，抽时间写了这个程序，也算是对学到的东西的一点小小的应用吧</strong></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本程序运行在大疆开发板C型，基于STM32 HAL平台开发，具有极其优良的可移植性，可以快速迁移至其他MCU，本程序依托串口与上位机通信，使用时接串口线和电池即可</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p><img src="https://cdn.jsdelivr.net/gh/MDLZCOOL/blog-img/img/202404301832725.png" alt="image-20240430183243677"></p>
<p>对主菜单的解释，每个指令串口都会输出对应的注解，<strong>注意输入任何指令都需要以回车结尾！</strong></p>
<table>
<thead>
<tr>
<th>功能</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>Plain Servo Test</td>
<td>朴素舵机测试（控制舵机转到特定角度）</td>
</tr>
<tr>
<td>Interval Servo Test</td>
<td>区间舵机测试（控制舵机在特定区间转动）</td>
</tr>
<tr>
<td>Quick Servo Test</td>
<td>快速舵机测试（快速测试舵机好坏）</td>
</tr>
<tr>
<td>Use Multi Channels</td>
<td>使用多个PWM通道，可以一次测试多个舵机</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Dev</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
</search>
